import { useState } from 'react';
import { useNavigate, Link } from 'react-router-dom';
import { useTranslation } from 'react-i18next';
import { createGroup } from '../../services/api';
import useAuth from '../../hooks/useAuth';
import './GroupStyles.scss';

const CreateGroup = () => {
  const { user } = useAuth();
  const navigate = useNavigate();
  const { t } = useTranslation();
  
  const [formData, setFormData] = useState({
    name: '',
    grade: '',
    description: ''
  });
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);
  
  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData(prev => ({
      ...prev,
      [name]: value
    }));
    // –£–±–∏—Ä–∞–µ–º –æ—à–∏–±–∫—É –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø–æ–ª—è
    if (error) setError(null);
  };
  
  const handleSubmit = async (e) => {
    e.preventDefault();
    
    if (!formData.name.trim()) {
      setError('–¢–æ–ø –∞—Ç–∞—É—ã–Ω –µ–Ω–≥—ñ–∑—ñ“£—ñ–∑');
      return;
    }
    
    if (!formData.grade) {
      setError('–°—ã–Ω—ã–ø—Ç—ã —Ç–∞“£–¥–∞“£—ã–∑');
      return;
    }
    
    try {
      setLoading(true);
      setError(null);
      
      // Set subject to Python programming by default
      const groupData = {
        ...formData,
        subject: 'Python –ø—Ä–æ–≥—Ä–∞–º–º–∞–ª–∞—É'
      };
      
      // Call API to create group
      const response = await createGroup(groupData);
      
      // Navigate to the newly created group
      navigate(`/groups/${response.data._id}`);
    } catch (err) {
      console.error('Error creating group:', err);
      setError(err.response?.data?.message || '–¢–æ–ø—Ç—ã “õ“±—Ä—É –∫–µ–∑—ñ–Ω–¥–µ “õ–∞—Ç–µ –ø–∞–π–¥–∞ –±–æ–ª–¥—ã');
      setLoading(false);
    }
  };
  
  const grades = Array.from({ length: 11 }, (_, i) => i + 1);
  
  return (
    <div className="create-group-container">
      <div className="create-group-header">
        <h1>–ñ–∞“£–∞ —Ç–æ–ø “õ“±—Ä—É</h1>
        <p className="subtitle">–ñ–∞“£–∞ —Ç–æ–ø “õ“±—Ä—É –∞—Ä“õ—ã–ª—ã –æ“õ—É—à—ã–ª–∞—Ä–¥—ã “±–π—ã–º–¥–∞—Å—Ç—ã—Ä—ã–ø, —Ç–∞–ø—Å—ã—Ä–º–∞–ª–∞—Ä –º–µ–Ω —Ç–µ—Å—Ç—Ç–µ—Ä –±–µ—Ä—ñ“£—ñ–∑</p>
      </div>
      
      {error && (
        <div className="error-message">
          <span className="error-icon">‚ö†Ô∏è</span>
          <span>{error}</span>
        </div>
      )}
      
      <div className="card form-card">
        <form className="create-group-form" onSubmit={handleSubmit}>
          <div className="form-group">
            <label htmlFor="name">–¢–æ–ø –∞—Ç–∞—É—ã <span className="required">*</span></label>
            <input
              type="text"
              id="name"
              name="name"
              value={formData.name}
              onChange={handleChange}
              placeholder="–ú—ã—Å–∞–ª—ã: Python 9–ê-—Å—ã–Ω—ã–ø"
              required
              className={error && !formData.name.trim() ? 'error-input' : ''}
            />
            <p className="field-help-text">–û“õ—É—à—ã–ª–∞—Ä –º–µ–Ω –ø”ô–Ω –∞—Ç–∞—É—ã–Ω “õ–∞–º—Ç–∏—Ç—ã–Ω –∞—Ç–∞—É –±–µ—Ä–≥–µ–Ω –∂”©–Ω</p>
          </div>
          
          <div className="form-group">
            <label>–ü”ô–Ω</label>
            <div className="static-field">
              <span className="subject-icon">üíª</span> Python –ø—Ä–æ–≥—Ä–∞–º–º–∞–ª–∞—É
            </div>
            <p className="field-help-text">“ö–∞–∑—ñ—Ä–≥—ñ —É–∞“õ—ã—Ç—Ç–∞ —Ç–µ–∫ Python –ø—Ä–æ–≥—Ä–∞–º–º–∞–ª–∞—É –ø”ô–Ω—ñ “õ–æ–ª–∂–µ—Ç—ñ–º–¥—ñ</p>
          </div>
          
          <div className="form-group">
            <label htmlFor="grade">–°—ã–Ω—ã–ø <span className="required">*</span></label>
            <select
              id="grade"
              name="grade"
              value={formData.grade}
              onChange={handleChange}
              required
              className={error && !formData.grade ? 'error-input' : ''}
            >
              <option value="">-- –¢–∞“£–¥–∞“£—ã–∑ --</option>
              {grades.map(grade => (
                <option key={grade} value={grade}>{grade}</option>
              ))}
            </select>
            <p className="field-help-text">–û“õ—É—à—ã–ª–∞—Ä–¥—ã“£ —Å—ã–Ω—ã–±—ã–Ω —Ç–∞“£–¥–∞“£—ã–∑</p>
          </div>
          
          <div className="form-group">
            <label htmlFor="description">–°–∏–ø–∞—Ç—Ç–∞–º–∞</label>
            <textarea
              id="description"
              name="description"
              value={formData.description}
              onChange={handleChange}
              placeholder="–¢–æ–ø —Ç—É—Ä–∞–ª—ã “õ–æ—Å—ã–º—à–∞ –∞“õ–ø–∞—Ä–∞—Ç"
              rows={4}
            />
            <p className="field-help-text">–ê—Ç–∞-–∞–Ω–∞–ª–∞—Ä –º–µ–Ω –æ“õ—É—à—ã–ª–∞—Ä “Ø—à—ñ–Ω –ø–∞–π–¥–∞–ª—ã –∞“õ–ø–∞—Ä–∞—Ç “õ–æ—Å—ã“£—ã–∑</p>
          </div>
          
          
          <div className="form-actions">
            <Link to="/dashboard/teacher" className="btn btn-secondary">
              <span className="btn-icon">‚Üê</span> –ë–∞—Å —Ç–∞—Ä—Ç—É
            </Link>
            <button
              type="submit"
              className="btn btn-primary"
              disabled={loading}
            >
              {loading ? (
                <>
                  <span className="spinner"></span>
                  <span>–ñ–∞—Å–∞–ª—É–¥–∞...</span>
                </>
              ) : (
                <>
                  <span className="btn-icon">‚úì</span>
                  <span>–¢–æ–ø—Ç—ã “õ“±—Ä—É</span>
                </>
              )}
            </button>
          </div>
        </form>
      </div>
    </div>
  );
};

export default CreateGroup; 