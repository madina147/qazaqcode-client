import { useState, useEffect } from 'react';
import { useParams, Link, useNavigate } from 'react-router-dom';
import { getGroupById, updateGroup, getAvailableStudents, addStudentToGroup, removeStudentFromGroup } from '../../services/api';
import useAuth from '../../hooks/useAuth';
import './GroupStyles.scss';

const GroupDetails = () => {
  const { id } = useParams();
  const { user } = useAuth();
  const navigate = useNavigate();
  const [group, setGroup] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [showAddStudent, setShowAddStudent] = useState(false);
  const [availableStudents, setAvailableStudents] = useState([]);
  const [selectedStudent, setSelectedStudent] = useState('');
  const [addStudentError, setAddStudentError] = useState('');

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤–∞–ª–∏–¥–Ω—ã–π MongoDB ObjectId
  const isValidObjectId = /^[0-9a-fA-F]{24}$/.test(id);

  useEffect(() => {
    if (!isValidObjectId) {
      setError('–ù–µ–≤–µ—Ä–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –≥—Ä—É–ø–ø—ã');
      setLoading(false);
      return;
    }
    
    fetchGroup();
  }, [id]);

  const fetchGroup = async () => {
    try {
      setLoading(true);
      const { data } = await getGroupById(id);
      setGroup(data);
      
      // Only fetch available students if user is a teacher
      if (user?.role === 'teacher') {
        const response = await getAvailableStudents(id);
        setAvailableStudents(response.data);
      }
    } catch (err) {
      console.error('Error fetching group:', err);
      setError('–¢–æ–ø—Ç—ã –∂“Ø–∫—Ç–µ—É –∫–µ–∑—ñ–Ω–¥–µ “õ–∞—Ç–µ –ø–∞–π–¥–∞ –±–æ–ª–¥—ã');
    } finally {
      setLoading(false);
    }
  };

  const addStudent = async () => {
    if (!selectedStudent) {
      setAddStudentError('–û“õ—É—à—ã–Ω—ã —Ç–∞“£–¥–∞“£—ã–∑');
      return;
    }

    try {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é API –≤–º–µ—Å—Ç–æ –ø—Ä—è–º–æ–≥–æ –≤—ã–∑–æ–≤–∞ axios
      const response = await addStudentToGroup(id, selectedStudent);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –≥—Ä—É–ø–ø—É –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
      setGroup(response.data);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å—Ç—É–¥–µ–Ω—Ç–æ–≤
      setAvailableStudents(prev => prev.filter(s => s._id !== selectedStudent));
      
      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É
      setShowAddStudent(false);
      setSelectedStudent('');
      setAddStudentError('');
    } catch (err) {
      console.error('Error adding student:', err);
      if (err.response && err.response.data && err.response.data.message === 'Student already in group') {
        setAddStudentError('–ë“±–ª –æ“õ—É—à—ã —Ç–æ–ø—Ç–∞ –±–∞—Ä');
      } else {
        setAddStudentError('–û“õ—É—à—ã–Ω—ã “õ–æ—Å—É –∫–µ–∑—ñ–Ω–¥–µ “õ–∞—Ç–µ –ø–∞–π–¥–∞ –±–æ–ª–¥—ã');
      }
    }
  };

  const removeStudent = async (studentId) => {
    if (!studentId) {
      alert('–ñ–∞—Ä–∞–º—Å—ã–∑ –û“õ—É—à—ã –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã');
      return;
    }

    try {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º API —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å—Ç—É–¥–µ–Ω—Ç–∞
      const response = await removeStudentFromGroup(id, studentId);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –≥—Ä—É–ø–ø—É –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
      setGroup(response.data);
      
      // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å—Ç—É–¥–µ–Ω—Ç–æ–≤
      const removedStudent = group.students.find(s => s._id === studentId);
      if (removedStudent) {
        setAvailableStudents(prev => [...prev, removedStudent]);
      }
    } catch (err) {
      console.error('Error removing student:', err);
      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã –æ—à–∏–±–æ–∫ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–Ω—è—Ç–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
      if (err.response && err.response.data) {
        const errorMessage = err.response.data.message;
        if (errorMessage === 'Invalid student ID' || errorMessage === 'Invalid student ID format') {
          alert('–ñ–∞—Ä–∞–º—Å—ã–∑ –æ“õ—É—à—ã –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã');
        } else if (errorMessage === 'Student not in group') {
          alert('–ë“±–ª –æ“õ—É—à—ã —Ç–æ–ø—Ç–∞ –µ–º–µ—Å');
        } else if (errorMessage === 'Student not found') {
          alert('–û“õ—É—à—ã —Ç–∞–±—ã–ª–º–∞–¥—ã');
        } else {
          alert('–û“õ—É—à—ã–Ω—ã –∂–æ—é –∫–µ–∑—ñ–Ω–¥–µ “õ–∞—Ç–µ –ø–∞–π–¥–∞ –±–æ–ª–¥—ã: ' + errorMessage);
        }
      } else {
        alert('–û“õ—É—à—ã–Ω—ã –∂–æ—é –∫–µ–∑—ñ–Ω–¥–µ “õ–∞—Ç–µ –ø–∞–π–¥–∞ –±–æ–ª–¥—ã');
      }
    }
  };

  const createAssignment = () => {
    navigate(`/groups/${id}/assignments/create`);
  };

  const createTest = () => {
    navigate(`/groups/${id}/tests/create`);
  };

  if (loading) {
    return <div className="loading">–ñ“Ø–∫—Ç–µ–ª—É–¥–µ...</div>;
  }

  if (error) {
    return (
      <div className="error-container">
        <div className="error">{error}</div>
        <div className="back-link">
          <Link to={user?.role === 'teacher' ? '/dashboard/teacher' : '/dashboard/student'}>
            –ë–∞“õ—ã–ª–∞—É —Ç–∞“õ—Ç–∞—Å—ã–Ω–∞ –æ—Ä–∞–ª—É
          </Link>
        </div>
      </div>
    );
  }

  if (!group) {
    return (
      <div className="error-container">
        <div className="error">–¢–æ–ø —Ç–∞–±—ã–ª–º–∞–¥—ã</div>
        <div className="back-link">
          <Link to={user?.role === 'teacher' ? '/dashboard/teacher' : '/dashboard/student'}>
            –ë–∞“õ—ã–ª–∞—É —Ç–∞“õ—Ç–∞—Å—ã–Ω–∞ –æ—Ä–∞–ª—É
          </Link>
        </div>
      </div>
    );
  }

  const isTeacher = user?.role === 'teacher';

  return (
    <div className="group-details-container">
      <Link to={user?.role === 'teacher' ? '/dashboard/teacher' : '/dashboard/student'} className="back-link">
        <span className="icon">‚Üê</span> –ë–∞“õ—ã–ª–∞—É —Ç–∞“õ—Ç–∞—Å—ã–Ω–∞ –æ—Ä–∞–ª—É
      </Link>
      
      <div className="group-header">
        <h1 className="modern-heading">{group.name}</h1>
        <div className="group-meta">
          <div className="meta-item">
            <span className="meta-icon">üë®‚Äçüè´</span> 
            <span>–ú“±“ì–∞–ª—ñ–º: {group.teacher.firstName} {group.teacher.lastName}</span>
          </div>
          <div className="meta-item">
            <span className="meta-icon">üë•</span> 
            <span>–û“õ—É—à—ã–ª–∞—Ä —Å–∞–Ω—ã: {group.students.length}</span>
          </div>
        </div>
        {group.description && (
          <div className="group-description">
            <p>{group.description}</p>
          </div>
        )}
      </div>

      <div className="group-content">
        {isTeacher && (
          <div className="teacher-actions">
            
            
            {showAddStudent ? (
              <div className="add-student-form">
                <h3>–û“õ—É—à—ã–Ω—ã “õ–æ—Å—É</h3>
                {addStudentError && <div className="form-error">{addStudentError}</div>}
                
                <div className="form-group">
                  <label htmlFor="student">–û“õ—É—à—ã–Ω—ã —Ç–∞“£–¥–∞“£—ã–∑:</label>
                  <select 
                    id="student" 
                    value={selectedStudent} 
                    onChange={(e) => setSelectedStudent(e.target.value)}
                  >
                    <option value="">–¢–∞“£–¥–∞“£—ã–∑...</option>
                    {availableStudents.map(student => (
                      <option key={student._id} value={student._id}>
                        {student.firstName} {student.lastName}
                      </option>
                    ))}
                  </select>
                </div>
                
                <div className="form-actions">
                  <button className="action-button primary" onClick={addStudent}>
                    <span className="icon">‚úì&nbsp;</span>
                    <span>“ö–æ—Å—É</span>
                  </button>
                  <button className="action-button secondary" onClick={() => setShowAddStudent(false)}>
                    <span className="icon">‚úï&nbsp;</span>
                    <span>–ë–∞—Å —Ç–∞—Ä—Ç—É</span>
                  </button>
                </div>
              </div>
            ) : (
              <div className="teacher-buttons">
                <button className="action-button primary" style={{margin:'0.5rem 0.5rem 0.5rem 0'}} onClick={() => setShowAddStudent(true)}>
                  <span className="icon">üë§&nbsp;</span>
                  <span>–û“õ—É—à—ã “õ–æ—Å—É</span>
                </button>
                <button className="action-button secondary" onClick={createAssignment}>
                  <span className="icon">üìù&nbsp;</span>
                  <span>–¢–∞–ø—Å—ã—Ä–º–∞ “õ“±—Ä—É</span>
                </button>
                <button className="action-button secondary" onClick={createTest}>
                  <span className="icon">üìã&nbsp;</span>
                  <span>–¢–µ—Å—Ç “õ“±—Ä—É</span>
                </button>
                <button className="action-button secondary" onClick={() => navigate(`/groups/${id}/materials/create`)}>
                  <span className="icon">üìö&nbsp;</span>
                  <span>–ú–∞—Ç–µ—Ä–∏–∞–ª –∂–∞—Å–∞—É</span>
                </button>
              </div>
            )}
            <h4>–û“õ—ã—Ç—É—à—ã ”ô—Ä–µ–∫–µ—Ç—Ç–µ—Ä—ñ</h4>
          </div>
        )}

        <div className="resources-section">
          <h2 className="section-title">
            <span className="section-icon">üìö</span>
            –†–µ—Å—É—Ä—Å—Ç–∞—Ä
          </h2>
          <div className="resources-container">
            <div className="resource-card">
              <div className="resource-icon">üìù</div>
              <div className="resource-content">
                <Link to={`/groups/${id}/assignments`} className="resource-link">
                  <h3>–¢–∞–ø—Å—ã—Ä–º–∞–ª–∞—Ä</h3>
                  <p>–ë–∞—Ä–ª—ã“õ —Ç–æ–ø —Ç–∞–ø—Å—ã—Ä–º–∞–ª–∞—Ä—ã–Ω–∞ “õ–æ–ª –∂–µ—Ç–∫—ñ–∑—ñ“£—ñ–∑</p>
                </Link>
              </div>
            </div>

            <div className="resource-card">
              <div className="resource-icon">üìä</div>
              <div className="resource-content">
                <Link to={`/groups/${id}/tests`} className="resource-link">
                  <h3>–¢–µ—Å—Ç—Ç–µ—Ä</h3>
                  <p>–¢–µ—Å—Ç—Ç–µ—Ä —Ç—ñ–∑—ñ–º—ñ–Ω “õ–∞—Ä–∞“£—ã–∑</p>
                </Link>
              </div>
            </div>

            <div className="resource-card">
              <div className="resource-icon">üìö</div>
              <div className="resource-content">
                <Link to={`/groups/${id}/materials`} className="resource-link">
                  <h3>–ú–∞—Ç–µ—Ä–∏–∞–ª–¥–∞—Ä</h3>
                  <p>–û“õ—É –º–∞—Ç–µ—Ä–∏–∞–ª–¥–∞—Ä—ã–Ω–∞ “õ–æ–ª –∂–µ—Ç–∫—ñ–∑—ñ“£—ñ–∑</p>
                </Link>
              </div>
            </div>
          </div>
        </div>

        <div className="students-section">
          <h2>–û“õ—É—à—ã–ª–∞—Ä —Ç—ñ–∑—ñ–º—ñ</h2>
          {group.students.length > 0 ? (
            <div className="students-list">
              {group.students.map(student => (
                <div key={student._id} className="student-card">
                  <div className="student-info">
                    <h3>{student.firstName} {student.lastName}</h3>
                    <p><span className="meta-icon">üè´</span> –°—ã–Ω—ã–ø: {student.grade}{student.gradeLetter}</p>
                    <p><span className="meta-icon">üèÜ</span> “∞–ø–∞–π–ª–∞—Ä: {student.points || 0}</p>
                  </div>
                  {isTeacher && (
                    <div className="student-actions">
                      <button className="action-button secondary" onClick={() => navigate(`/students/${student._id}/rate`)}>
                        <span className="icon">‚úì&nbsp;</span>
                        <span>–ë–∞“ì–∞–ª–∞—É</span>
                      </button>
                      <button className="action-button danger" onClick={() => removeStudent(student._id)}>
                        <span className="icon">‚úï&nbsp;</span>
                        <span>–ñ–æ—é</span>
                      </button>
                    </div>
                  )}
                </div>
              ))}
            </div>
          ) : (
            <p>–ë“±–ª —Ç–æ–ø—Ç–∞ –æ“õ—É—à—ã–ª–∞—Ä –∂–æ“õ</p>
          )}
        </div>
      </div>
    </div>
  );
};


export default GroupDetails; 